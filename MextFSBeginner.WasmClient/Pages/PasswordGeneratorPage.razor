@page "/password-generator"
@using MextFSBeginner.WasmClient.Enums

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService ToastService


<PageTitle>Password Generator</PageTitle>

<MextPageTitle Title="Password Generator" TitleCSS="text-primary">
    <SvgFragment>
        <svg width="24" height="24" fill="currentColor" class="text-primary" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 14.5V16.5M7 10.0288C7.47142 10 8.05259 10 8.8 10H15.2C15.9474 10 16.5286 10 17 10.0288M7 10.0288C6.41168 10.0647 5.99429 10.1455 5.63803 10.327C5.07354 10.6146 4.6146 11.0735 4.32698 11.638C4 12.2798 4 13.1198 4 14.8V16.2C4 17.8802 4 18.7202 4.32698 19.362C4.6146 19.9265 5.07354 20.3854 5.63803 20.673C6.27976 21 7.11984 21 8.8 21H15.2C16.8802 21 17.7202 21 18.362 20.673C18.9265 20.3854 19.3854 19.9265 19.673 19.362C20 18.7202 20 17.8802 20 16.2V14.8C20 13.1198 20 12.2798 19.673 11.638C19.3854 11.0735 18.9265 10.6146 18.362 10.327C18.0057 10.1455 17.5883 10.0647 17 10.0288M7 10.0288V8C7 5.23858 9.23858 3 12 3C14.7614 3 17 5.23858 17 8V10.0288" stroke="#A0DEFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </SvgFragment>
</MextPageTitle>

<div class="d-flex justify-content-center">
    <div class="card rounded-3 shadow-lg" style="width: 46rem;">
        <div class="card-body">
            <h4 class="card-title">Password Generator</h4>
            @* Form Inputs Start *@
            @* // Todo: Up and Bottom arrow keys are not working properly. *@
            @* // Todo: The password is not changing when we click them *@
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">🔒</span>
                <input type="text" class="form-control" @bind="@password">
                <button class="btn btn-outline-info" type="button" @onclick="HandleSaveButtonClick">💾</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => CopyPasswordToClipboard(null))">📋</button>
                <button class="@buttonClass" type="button" @onmouseenter="() => ChangeColor(true)"
                        @onmouseleave="() => ChangeColor(false)" @onclick="GeneratePassword">
                    🔄
                </button>
            </div>

            <div class="input-group mb-3">
                <input type="number" class="form-control" @bind="@passwordLength">
                <span class="input-group-text">|</span>
                <input style="height: 2rem;" @oninput="HandleRangeOnChange" type="range" step="1" min="6" max="30" class="form-range" @bind="@passwordLength">
            </div>

            <div class="d-flex justify-content-between">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeNumbers" @bind="@includeNumbers" @oninput="@((args) => HandleCheckBoxOnChange(args, CheckBoxActionType.Numbers))">
                    <label class="form-check-label" for="includeNumbers">Numbers</label>
                </div>

                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeLowercase" @bind="@includeLowercase" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Lowercase))">
                    <label class="form-check-label" for="includeLowercase">Lowercase</label>
                </div>

                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeUppercase" @bind="@includeUppercase" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Uppercase))">
                    <label class="form-check-label" for="includeUppercase">Uppercase</label>
                </div>

                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeSpecialCharacters" @bind="@includeSpecialCharacters" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.SpecialCharacters))">
                    <label class="form-check-label" for="includeSpecialCharacters">Special Characters</label>
                </div>
            </div>

            <div class="input-group mt-3">
                <button class="btn btn-warning" @onclick="RedirectToCounterPage">Beni Counter Sayfasina Yonlendir</button>
                <button class="btn btn-success" @onclick="RedirectToWheatherPage">Beni Wheather Sayfasina Yonlendir</button>
                <button class="btn btn-secondary" @onclick="RedirectToPasswordGeneratorPage">Beni PasswordGenerator Sayfasina Yonlendir</button>
            </div>

            @* Form Inputs End *@
        </div>
    </div>
</div>

@* <SavedPasswordsCard /> *@
<SavedPasswordsCard SavedPasswords="savedPasswords"
                    CopyPasswordToClipboardCallback="CopyPasswordToClipboard"
                    HandleDeleteButtonClickCallback="HandleDeleteButtonClick"
                    CardTitle="Hello Kitty's Saved Passwords"
                    />


@code
{
    List<string> savedPasswords = new List<string>();
    private string password = "123456";
    private int passwordLength = 6;

    private bool includeNumbers = true;
    private bool includeUppercase = false;
    private bool includeLowercase = false;
    private bool includeSpecialCharacters = false;

    private Random random = new Random();

    private void HandleRangeOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
            return;

        passwordLength = Convert.ToInt32(args.Value);

        GeneratePassword();
    }

    private void HandleCheckBoxOnChange(ChangeEventArgs args, CheckBoxActionType actionType)
    {
        if (args.Value == null)
            return;

        bool isChecked = Convert.ToBoolean(args.Value);


        if (actionType == CheckBoxActionType.Numbers)
            includeNumbers = isChecked;

        else if (actionType == CheckBoxActionType.Lowercase)
            includeLowercase = isChecked;

        else if (actionType == CheckBoxActionType.Uppercase)
            includeUppercase = isChecked;

        else if (actionType == CheckBoxActionType.SpecialCharacters)
            includeSpecialCharacters = isChecked;

        GeneratePassword();

    }

    private void GeneratePassword()
    {
        password = "";

        // Lowercase Characters String
        const string lowercaseChars = "abcdefghijklmnopqrstuvwxyz";
        const string uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numberChars = "0123456789";
        const string specialChars = "!@#$%^&*()_+";

        string charsToUse = "";

        if (includeLowercase)
            charsToUse += lowercaseChars;

        if (includeUppercase)
            charsToUse += uppercaseChars;

        if (includeNumbers)
            charsToUse += numberChars;

        if (includeSpecialCharacters)
            charsToUse += specialChars;

        // charsToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";

        for (int i = 0; i < passwordLength; i++)
        {
            int randomIndex = random.Next(0, charsToUse.Length);

            password += charsToUse[randomIndex];
        }


    }

    string buttonClass = "btn btn-outline-secondary";

    void ChangeColor(bool isMouseOver)
    {
        buttonClass = isMouseOver ? "btn btn-outline-primary" : "btn btn-outline-secondary";
    }

    private void HandleSaveButtonClick()
    {
        // Bir sey var mi yok mu kontrolu (listede sifre var mi kontrol ediyoruz)
        if (savedPasswords.Any(p => p == password))
        {
            ToastService.ShowWarning("The selected password already saved.");
            return;
        }

        savedPasswords.Insert(0, password);

        ToastService.ShowSuccess("The selected password saved.");
    }

    private void HandleDeleteButtonClick(string password)
    {
        savedPasswords.Remove(password);

        ToastService.ShowSuccess("The selected password deleted.");
    }

    async Task CopyPasswordToClipboard(string? passwordToCopy)
    {
        if (string.IsNullOrWhiteSpace(passwordToCopy))
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);

        else
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", passwordToCopy);


        ToastService.ShowSuccess("The password copied.");
    }

    private void RedirectToCounterPage()
    {
        NavigationManager.NavigateTo("/counter");
    }

    private void RedirectToWheatherPage()
    {
        NavigationManager.NavigateTo("/weather");
    }

    private void RedirectToPasswordGeneratorPage()
    {
        NavigationManager.NavigateTo("/passwordgenerator");
    }
}

<style>
    body {
        background: linear-gradient(to bottom, #A0DEFF, #CAF4FF);
        /* Diğer stillendirme kodları buraya eklenebilir */
    }
</style>