@page "/"

<PageTitle>Home</PageTitle>

<div class="d-flex justify-content-center">
    <div class="card rounded-3 shadow-lg" style="width: 46rem;">
        <div class="card-body">
            <h4 class="card-title">Password Generator</h4>
            @* Form Inputs Start *@
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">🔒</span>
                <input type="text" class="form-control" @bind="@password">
            </div>

            <div class="input-group mb-3">
                <input type="number" class="form-control" @bind="@passwordLength">
                <span class="input-group-text">|</span>
                <input style="height: 2rem;" @oninput="HandleRangeOnChange" type="range" step="1" min="6" max="30" class="form-range" @bind="@passwordLength">
            </div>
            
            <div class="d-flex justify-content-between">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeNumbers" @bind="@includeNumbers" @oninput="@((args) => HandleCheckBoxOnChange(args, CheckBoxActionType.Numbers))">
                    <label class="form-check-label" for="includeNumbers">Numbers</label>
                </div>

                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeLowercase" @bind="@includeLowercase" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Lowercase))">
                    <label class="form-check-label" for="includeLowercase">Lowercase</label>
                </div>
            
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeUppercase" @bind="@includeUppercase" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Uppercase))">
                    <label class="form-check-label" for="includeUppercase">Uppercase</label>
                </div>
            
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="includeSpecialCharacters" @bind="@includeSpecialCharacters" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.SpecialCharacters))">
                    <label class="form-check-label" for="includeSpecialCharacters">Special Characters</label>
                </div>
            </div>

            @* Form Inputs End *@
        </div>
    </div>
</div>



@code
{
    private string password = "123456";
    private int passwordLength = 6;

    private bool includeNumbers = true;
    private bool includeUppercase = false;
    private bool includeLowercase = false;
    private bool includeSpecialCharacters = false;

    private Random random = new Random();

    private void HandleRangeOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
            return;

        passwordLength = Convert.ToInt32(args.Value);

        GeneratePassword();
    }

    private void HandleCheckBoxOnChange(ChangeEventArgs args, CheckBoxActionType actionType)
    {
        if (args.Value == null)
         return;

        bool isChecked = Convert.ToBoolean(args.Value);


        if (actionType == CheckBoxActionType.Numbers)
            includeNumbers = isChecked;

        else if(actionType == CheckBoxActionType.Lowercase)
            includeLowercase = isChecked;

        else if (actionType == CheckBoxActionType.Uppercase)
            includeUppercase = isChecked;

        else if (actionType == CheckBoxActionType.SpecialCharacters)
            includeSpecialCharacters = isChecked;
        
    }

    private void GeneratePassword()
    {
        password = "";

        // Lowercase Characters String
        const string lowercaseChars = "abcdefghijklmnopqrstuvwxyz";
        const string uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numberChars = "0123456789";
        const string specialChars = "!@#$%^&*()_+";

        string charsToUse = "";

        if (includeLowercase)
            charsToUse += lowercaseChars;
        
        if (includeUppercase)
            charsToUse += uppercaseChars;

        if (includeNumbers)
            charsToUse += numberChars;

        if (includeSpecialCharacters)
            charsToUse += specialChars;

        charsToUse = "ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789!@#$%^&*()_+";

        for (int i = 0; i < passwordLength; i++)
        {
            int randomNumber = random.Next(0, charsToUse.Length);
            password += randomNumber;
        }
    }
}
