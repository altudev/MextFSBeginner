@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@using MextFSBeginner.Domain.Entities
<div class="container">
    <div class="row">
        
        @*    <select class="form-select" aria-label="Default select example">
            <option selected disabled="disabled">Select a Sorting</option>
            <option value="1">One</option>
            <option value="2">Two</option>
            <option value="3">Three</option>
        </select> *@

        <div class="d-flex">
            <div class="form-check me-5">
                <input class="form-check-input" type="checkbox" @bind=@sortByAscending @oninput=@HandleSortByCheckboxOnChange id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                    Sort By A-Z
                </label>
            </div>
            
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind=@showFavourites @oninput=@HandleFilterCheckboxOnChange id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                    Favourites
                </label>
            </div>
        </div>

        @if (accounts == null)
        {
            <div class="full-screen-center">
                <div class="d-flex justify-content-center align-items-center">
                    <h3 class="text-primary me-3 h1">Loading.. </h3>
                    <div class="spinner-border text-primary h1" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            @foreach (var account in filteredAccounts)
            {
                <div class="col-md-4">
                    <AccountCard Account="account"></AccountCard>
                </div>
            }
        }
    </div>
</div>

@code {
    List<Account> accounts = null;
    List<Account> filteredAccounts = null;

    private bool showFavourites = false;

    // Asceding = Artan / Descending = Azalan
    // A'dan Z'ye - 0'dan 100'e /  Z'den A'ya - 100'den 0'a
    private bool sortByAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);

        accounts = new List<Account>
        {
            new Account()
            {
                Id = Guid.NewGuid(),
                UserName = "alper.tunga@yazilim.academy",
                Password = "MTIzYWxwZXJ0dW5nYTEyMw==",
                IsShown = false,
                Title = "Yazilim Academy",
                Url = "https://www.youtube.com",
                IsFavourite = true
            },
            new Account()
            {
                Id = Guid.NewGuid(),
                UserName = "muberra.gungoren@google.com",
                Password = "MTIzZ29sa2VuYXJpMTIz",
                IsShown = false,
                Title = "Google",
                Url = "https://www.google.com",
                IsFavourite = false
            },
            new Account()
            {
                Id = Guid.NewGuid(),
                UserName = "john.doe@example.com",
                Password = "MTIzam9obmRvZTEyMw==",
                IsShown = false,
                Title = "Example",
                Url = "https://www.example.com",
                IsFavourite = true
            },
            new Account()
            {
                Id = Guid.NewGuid(),
                UserName = "jane.smith@gmail.com",
                Password = "MTIzamFuZXNtaXRoMTIz",
                IsShown = false,
                Title = "Gmail",
                Url = "https://www.gmail.com",
                IsFavourite = false
            },
            new Account()
            {
                Id = Guid.NewGuid(),
                UserName = "michael.johnson@outlook.com",
                Password = "MTIzbWljaGFlbGpvaG5zb24xMjM=",
                IsShown = false,
                Title = "Outlook",
                Url = "https://www.outlook.com",
                IsFavourite = true
            },
            new Account()
            {
                Id = Guid.NewGuid(),
                UserName = "sarah.wilson@yahoo.com",
                Password = "MTIzc2FyYWh3aWxzb24xMjM=",
                IsShown = false,
                Title = "Yahoo",
                Url = "https://www.yahoo.com",
                IsFavourite = false
            }
        };

        filteredAccounts = new List<Account>(accounts)
            .OrderBy(a=>a.Title)
            .ToList();

        await base.OnInitializedAsync();
    }

    private void HandleFilterCheckboxOnChange(ChangeEventArgs args)
    {
        if (args == null)
         return;

        showFavourites = Convert.ToBoolean(args.Value);

        if (showFavourites)
            filteredAccounts = accounts.Where(a => a.IsFavourite).ToList();

        else
            filteredAccounts = new List<Account>(accounts);

         SortAccounts();
        
    }

    private void HandleSortByCheckboxOnChange(ChangeEventArgs args)
    {
        if (args == null)
            return;

        sortByAscending = Convert.ToBoolean(args.Value);

        SortAccounts();
    }

    private void SortAccounts()
    {
        if (sortByAscending)
            filteredAccounts = filteredAccounts
                .OrderBy(ac => ac.Title)
                .ToList();
        else
            filteredAccounts = filteredAccounts
                .OrderByDescending(ac => ac.Title)
                .ToList();
    }


    
}
